// Code generated by gen/repo. DO NOT EDIT.
// Code generated by gen/repo. DO NOT EDIT.
// Code generated by gen/repo. DO NOT EDIT.

package user_repo

import (
	"context"
	"encoding/json"
	"errors"
	"time"

	"github.com/dtm-labs/rockscache"
	"github.com/fzf-labs/fpkg/cache/cachekey"
	"github.com/fzf-labs/fpkg/conv"
	"github.com/fzf-labs/fpkg/db/gen/example/postgres/user_dao"
	"github.com/fzf-labs/fpkg/db/gen/example/postgres/user_model"
	"gorm.io/gorm"
)

var _ ISystemUsersRepo = (*SystemUsersRepo)(nil)

var (
	// 缓存管理器
	cacheKeySystemUsersManage = cachekey.NewKeyManage("SystemUsersRepo")
	// 只针对唯一索引做缓存
	CacheSystemUsersByUsername = cacheKeySystemUsersManage.AddKey("CacheSystemUsersByUsername", time.Hour*24, "CacheSystemUsersByUsername")
	CacheSystemUsersByID       = cacheKeySystemUsersManage.AddKey("CacheSystemUsersByID", time.Hour*24, "CacheSystemUsersByID")
	CacheSystemUsersByMobile   = cacheKeySystemUsersManage.AddKey("CacheSystemUsersByMobile", time.Hour*24, "CacheSystemUsersByMobile")
)

type (
	ISystemUsersRepo interface {
		// CreateOne 创建一条数据
		CreateOne(ctx context.Context, data *user_model.SystemUsers) error
		// UpdateOne 更新一条数据
		UpdateOne(ctx context.Context, data *user_model.SystemUsers) error
		// DeleteOneCacheByUsername 根据username删除一条数据并清理缓存
		DeleteOneCacheByUsername(ctx context.Context, username string) error
		// DeleteMultiCacheByUsernames 根据Usernames删除多条数据并清理缓存
		DeleteMultiCacheByUsernames(ctx context.Context, usernames []string) error
		// DeleteOneCacheByID 根据ID删除一条数据并清理缓存
		DeleteOneCacheByID(ctx context.Context, ID int64) error
		// DeleteMultiCacheByIDS 根据IDS删除多条数据并清理缓存
		DeleteMultiCacheByIDS(ctx context.Context, IDS []int64) error
		// DeleteOneCacheByMobile 根据mobile删除一条数据并清理缓存
		DeleteOneCacheByMobile(ctx context.Context, mobile string) error
		// DeleteMultiCacheByMobiles 根据Mobiles删除多条数据并清理缓存
		DeleteMultiCacheByMobiles(ctx context.Context, mobiles []string) error
		// DeleteUniqueIndexCache 删除唯一索引存在的缓存
		DeleteUniqueIndexCache(ctx context.Context, data []*user_model.SystemUsers) error
		// FindOneCacheByUsername 根据username查询一条数据并设置缓存
		FindOneCacheByUsername(ctx context.Context, username string) (*user_model.SystemUsers, error)
		// FindMultiCacheByUsernames 根据usernames查询多条数据并设置缓存
		FindMultiCacheByUsernames(ctx context.Context, usernames []string) ([]*user_model.SystemUsers, error)
		// FindOneCacheByID 根据ID查询一条数据并设置缓存
		FindOneCacheByID(ctx context.Context, ID int64) (*user_model.SystemUsers, error)
		// FindMultiCacheByIDS 根据IDS查询多条数据并设置缓存
		FindMultiCacheByIDS(ctx context.Context, IDS []int64) ([]*user_model.SystemUsers, error)
		// FindOneCacheByMobile 根据mobile查询一条数据并设置缓存
		FindOneCacheByMobile(ctx context.Context, mobile string) (*user_model.SystemUsers, error)
		// FindMultiCacheByMobiles 根据mobiles查询多条数据并设置缓存
		FindMultiCacheByMobiles(ctx context.Context, mobiles []string) ([]*user_model.SystemUsers, error)
		// FindMultiByEmail 根据email查询多条数据
		FindMultiByEmail(ctx context.Context, email string) ([]*user_model.SystemUsers, error)
		// FindMultiByEmails 根据emails查询多条数据
		FindMultiByEmails(ctx context.Context, emails []string) ([]*user_model.SystemUsers, error)
		// FindMultiByDeptIDStatus 根据DeptIDStatus查询多条数据
		FindMultiByDeptIDStatus(ctx context.Context, deptID int64, status int16) ([]*user_model.SystemUsers, error)
	}

	SystemUsersRepo struct {
		db         *gorm.DB
		rockscache *rockscache.Client
	}
)

func NewSystemUsersRepo(db *gorm.DB, rockscache *rockscache.Client) *SystemUsersRepo {
	return &SystemUsersRepo{
		db:         db,
		rockscache: rockscache,
	}
}

// CreateOne 创建一条数据
func (r *SystemUsersRepo) CreateOne(ctx context.Context, data *user_model.SystemUsers) error {
	dao := user_dao.Use(r.db).SystemUsers
	err := dao.WithContext(ctx).Create(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOne 更新一条数据
func (r *SystemUsersRepo) UpdateOne(ctx context.Context, data *user_model.SystemUsers) error {
	dao := user_dao.Use(r.db).SystemUsers
	_, err := dao.WithContext(ctx).Where(dao.ID.Eq(data.ID)).Updates(data)
	if err != nil {
		return err
	}
	err = r.DeleteUniqueIndexCache(ctx, []*user_model.SystemUsers{data})
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneCacheByUsername 根据username删除一条数据并清理缓存
func (r *SystemUsersRepo) DeleteOneCacheByUsername(ctx context.Context, username string) error {
	dao := user_dao.Use(r.db).SystemUsers
	first, err := dao.WithContext(ctx).Where(dao.Username.Eq(username)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if first == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.Username.Eq(username)).Delete()
	if err != nil {
		return err
	}
	err = r.DeleteUniqueIndexCache(ctx, []*user_model.SystemUsers{first})
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByUsernames 根据usernames删除多条数据并清理缓存
func (r *SystemUsersRepo) DeleteMultiCacheByUsernames(ctx context.Context, usernames []string) error {
	dao := user_dao.Use(r.db).SystemUsers
	list, err := dao.WithContext(ctx).Where(dao.Username.In(usernames...)).Find()
	if err != nil {
		return err
	}
	if len(list) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.Username.In(usernames...)).Delete()
	if err != nil {
		return err
	}
	err = r.DeleteUniqueIndexCache(ctx, list)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneCacheByID 根据ID删除一条数据并清理缓存
func (r *SystemUsersRepo) DeleteOneCacheByID(ctx context.Context, ID int64) error {
	dao := user_dao.Use(r.db).SystemUsers
	first, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if first == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	err = r.DeleteUniqueIndexCache(ctx, []*user_model.SystemUsers{first})
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByIDS 根据IDS删除多条数据并清理缓存
func (r *SystemUsersRepo) DeleteMultiCacheByIDS(ctx context.Context, IDS []int64) error {
	dao := user_dao.Use(r.db).SystemUsers
	list, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Find()
	if err != nil {
		return err
	}
	if len(list) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	err = r.DeleteUniqueIndexCache(ctx, list)
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneCacheByMobile 根据mobile删除一条数据并清理缓存
func (r *SystemUsersRepo) DeleteOneCacheByMobile(ctx context.Context, mobile string) error {
	dao := user_dao.Use(r.db).SystemUsers
	first, err := dao.WithContext(ctx).Where(dao.Mobile.Eq(mobile)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if first == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.Mobile.Eq(mobile)).Delete()
	if err != nil {
		return err
	}
	err = r.DeleteUniqueIndexCache(ctx, []*user_model.SystemUsers{first})
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByMobiles 根据mobiles删除多条数据并清理缓存
func (r *SystemUsersRepo) DeleteMultiCacheByMobiles(ctx context.Context, mobiles []string) error {
	dao := user_dao.Use(r.db).SystemUsers
	list, err := dao.WithContext(ctx).Where(dao.Mobile.In(mobiles...)).Find()
	if err != nil {
		return err
	}
	if len(list) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.Mobile.In(mobiles...)).Delete()
	if err != nil {
		return err
	}
	err = r.DeleteUniqueIndexCache(ctx, list)
	if err != nil {
		return err
	}
	return nil
}

// DeleteUniqueIndexCache 删除唯一索引存在的缓存
func (r *SystemUsersRepo) DeleteUniqueIndexCache(ctx context.Context, data []*user_model.SystemUsers) error {
	var err error
	cacheSystemUsersByUsername := CacheSystemUsersByUsername.NewSingleKey(r.rockscache)
	cacheSystemUsersByID := CacheSystemUsersByID.NewSingleKey(r.rockscache)
	cacheSystemUsersByMobile := CacheSystemUsersByMobile.NewSingleKey(r.rockscache)

	for _, v := range data {
		err = cacheSystemUsersByUsername.SingleCacheDel(ctx, cacheSystemUsersByUsername.BuildKey(v.Username))
		if err != nil {
			return err
		}
		err = cacheSystemUsersByID.SingleCacheDel(ctx, cacheSystemUsersByID.BuildKey(v.ID))
		if err != nil {
			return err
		}
		err = cacheSystemUsersByMobile.SingleCacheDel(ctx, cacheSystemUsersByMobile.BuildKey(v.Mobile))
		if err != nil {
			return err
		}

	}
	return nil
}

// FindOneCacheByUsername 根据username查询一条数据并设置缓存
func (r *SystemUsersRepo) FindOneCacheByUsername(ctx context.Context, username string) (*user_model.SystemUsers, error) {
	resp := new(user_model.SystemUsers)
	cache := CacheSystemUsersByUsername.NewSingleKey(r.rockscache)
	cacheValue, err := cache.SingleCache(ctx, conv.String(username), func() (string, error) {
		dao := user_dao.Use(r.db).SystemUsers
		result, err := dao.WithContext(ctx).Where(dao.Username.Eq(username)).First()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := json.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	})
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(cacheValue), resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// FindMultiCacheByUsernames 根据usernames查询多条数据并设置缓存
func (r *SystemUsersRepo) FindMultiCacheByUsernames(ctx context.Context, usernames []string) ([]*user_model.SystemUsers, error) {
	resp := make([]*user_model.SystemUsers, 0)
	cacheKey := CacheSystemUsersByUsername.NewBatchKey(r.rockscache)
	batchKeys := make([]string, 0)
	for _, v := range usernames {
		batchKeys = append(batchKeys, conv.String(v))
	}
	cacheValue, err := cacheKey.BatchKeyCache(ctx, batchKeys, func() (map[string]string, error) {
		dao := user_dao.Use(r.db).SystemUsers
		result, err := dao.WithContext(ctx).Where(dao.Username.In(usernames...)).Find()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, err
		}
		value := make(map[string]string)
		for _, v := range result {
			marshal, err := json.Marshal(v)
			if err != nil {
				return nil, err
			}
			value[conv.String(v.Username)] = string(marshal)
		}
		return value, nil
	})
	if err != nil {
		return nil, err
	}
	for _, v := range cacheValue {
		tmp := new(user_model.SystemUsers)
		err := json.Unmarshal([]byte(v), tmp)
		if err != nil {
			return nil, err
		}
		resp = append(resp, tmp)
	}
	return resp, nil
}

// FindOneCacheByID 根据ID查询一条数据并设置缓存
func (r *SystemUsersRepo) FindOneCacheByID(ctx context.Context, ID int64) (*user_model.SystemUsers, error) {
	resp := new(user_model.SystemUsers)
	cache := CacheSystemUsersByID.NewSingleKey(r.rockscache)
	cacheValue, err := cache.SingleCache(ctx, conv.String(ID), func() (string, error) {
		dao := user_dao.Use(r.db).SystemUsers
		result, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).First()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := json.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	})
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(cacheValue), resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// FindMultiCacheByIDS 根据IDS查询多条数据并设置缓存
func (r *SystemUsersRepo) FindMultiCacheByIDS(ctx context.Context, IDS []int64) ([]*user_model.SystemUsers, error) {
	resp := make([]*user_model.SystemUsers, 0)
	cacheKey := CacheSystemUsersByID.NewBatchKey(r.rockscache)
	batchKeys := make([]string, 0)
	for _, v := range IDS {
		batchKeys = append(batchKeys, conv.String(v))
	}
	cacheValue, err := cacheKey.BatchKeyCache(ctx, batchKeys, func() (map[string]string, error) {
		dao := user_dao.Use(r.db).SystemUsers
		result, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Find()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, err
		}
		value := make(map[string]string)
		for _, v := range result {
			marshal, err := json.Marshal(v)
			if err != nil {
				return nil, err
			}
			value[conv.String(v.ID)] = string(marshal)
		}
		return value, nil
	})
	if err != nil {
		return nil, err
	}
	for _, v := range cacheValue {
		tmp := new(user_model.SystemUsers)
		err := json.Unmarshal([]byte(v), tmp)
		if err != nil {
			return nil, err
		}
		resp = append(resp, tmp)
	}
	return resp, nil
}

// FindOneCacheByMobile 根据mobile查询一条数据并设置缓存
func (r *SystemUsersRepo) FindOneCacheByMobile(ctx context.Context, mobile string) (*user_model.SystemUsers, error) {
	resp := new(user_model.SystemUsers)
	cache := CacheSystemUsersByMobile.NewSingleKey(r.rockscache)
	cacheValue, err := cache.SingleCache(ctx, conv.String(mobile), func() (string, error) {
		dao := user_dao.Use(r.db).SystemUsers
		result, err := dao.WithContext(ctx).Where(dao.Mobile.Eq(mobile)).First()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := json.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	})
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal([]byte(cacheValue), resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// FindMultiCacheByMobiles 根据mobiles查询多条数据并设置缓存
func (r *SystemUsersRepo) FindMultiCacheByMobiles(ctx context.Context, mobiles []string) ([]*user_model.SystemUsers, error) {
	resp := make([]*user_model.SystemUsers, 0)
	cacheKey := CacheSystemUsersByMobile.NewBatchKey(r.rockscache)
	batchKeys := make([]string, 0)
	for _, v := range mobiles {
		batchKeys = append(batchKeys, conv.String(v))
	}
	cacheValue, err := cacheKey.BatchKeyCache(ctx, batchKeys, func() (map[string]string, error) {
		dao := user_dao.Use(r.db).SystemUsers
		result, err := dao.WithContext(ctx).Where(dao.Mobile.In(mobiles...)).Find()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, err
		}
		value := make(map[string]string)
		for _, v := range result {
			marshal, err := json.Marshal(v)
			if err != nil {
				return nil, err
			}
			value[conv.String(v.Mobile)] = string(marshal)
		}
		return value, nil
	})
	if err != nil {
		return nil, err
	}
	for _, v := range cacheValue {
		tmp := new(user_model.SystemUsers)
		err := json.Unmarshal([]byte(v), tmp)
		if err != nil {
			return nil, err
		}
		resp = append(resp, tmp)
	}
	return resp, nil
}

// FindMultiByEmail 根据email查询多条数据
func (r *SystemUsersRepo) FindMultiByEmail(ctx context.Context, email string) ([]*user_model.SystemUsers, error) {
	dao := user_dao.Use(r.db).SystemUsers
	result, err := dao.WithContext(ctx).Where(dao.Email.Eq(email)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiByEmails 根据emails查询多条数据
func (r *SystemUsersRepo) FindMultiByEmails(ctx context.Context, emails []string) ([]*user_model.SystemUsers, error) {
	dao := user_dao.Use(r.db).SystemUsers
	result, err := dao.WithContext(ctx).Where(dao.Email.In(emails...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiByDeptIDStatus 根据DeptIDStatus查询多条数据
func (r *SystemUsersRepo) FindMultiByDeptIDStatus(ctx context.Context, deptID int64, status int16) ([]*user_model.SystemUsers, error) {
	dao := user_dao.Use(r.db).SystemUsers
	result, err := dao.WithContext(ctx).Where(dao.DeptID.Eq(deptID), dao.Status.Eq(status)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}
