// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package user_dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fzf-labs/fpkg/db/gen/example/postgres/user_model"
)

func newUserSms(db *gorm.DB, opts ...gen.DOOption) userSms {
	_userSms := userSms{}

	_userSms.userSmsDo.UseDB(db, opts...)
	_userSms.userSmsDo.UseModel(&user_model.UserSms{})

	tableName := _userSms.userSmsDo.TableName()
	_userSms.ALL = field.NewAsterisk(tableName)
	_userSms.ID = field.NewInt64(tableName, "id")
	_userSms.IP = field.NewString(tableName, "ip")
	_userSms.Phone = field.NewString(tableName, "phone")
	_userSms.SendCount = field.NewInt64(tableName, "send_count")
	_userSms.AddDay = field.NewString(tableName, "add_day")
	_userSms.AddTime = field.NewInt64(tableName, "add_time")
	_userSms.Sign = field.NewString(tableName, "sign")

	_userSms.fillFieldMap()

	return _userSms
}

type userSms struct {
	userSmsDo userSmsDo

	ALL       field.Asterisk
	ID        field.Int64
	IP        field.String // ip地址
	Phone     field.String // 手机号
	SendCount field.Int64  // 发送统计
	AddDay    field.String // 添加日期
	AddTime   field.Int64  // 添加时间
	Sign      field.String // 签名

	fieldMap map[string]field.Expr
}

func (u userSms) Table(newTableName string) *userSms {
	u.userSmsDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userSms) As(alias string) *userSms {
	u.userSmsDo.DO = *(u.userSmsDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userSms) updateTableName(table string) *userSms {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.IP = field.NewString(table, "ip")
	u.Phone = field.NewString(table, "phone")
	u.SendCount = field.NewInt64(table, "send_count")
	u.AddDay = field.NewString(table, "add_day")
	u.AddTime = field.NewInt64(table, "add_time")
	u.Sign = field.NewString(table, "sign")

	u.fillFieldMap()

	return u
}

func (u *userSms) WithContext(ctx context.Context) *userSmsDo { return u.userSmsDo.WithContext(ctx) }

func (u userSms) TableName() string { return u.userSmsDo.TableName() }

func (u userSms) Alias() string { return u.userSmsDo.Alias() }

func (u userSms) Columns(cols ...field.Expr) gen.Columns { return u.userSmsDo.Columns(cols...) }

func (u *userSms) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userSms) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["ip"] = u.IP
	u.fieldMap["phone"] = u.Phone
	u.fieldMap["send_count"] = u.SendCount
	u.fieldMap["add_day"] = u.AddDay
	u.fieldMap["add_time"] = u.AddTime
	u.fieldMap["sign"] = u.Sign
}

func (u userSms) clone(db *gorm.DB) userSms {
	u.userSmsDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userSms) replaceDB(db *gorm.DB) userSms {
	u.userSmsDo.ReplaceDB(db)
	return u
}

type userSmsDo struct{ gen.DO }

func (u userSmsDo) Debug() *userSmsDo {
	return u.withDO(u.DO.Debug())
}

func (u userSmsDo) WithContext(ctx context.Context) *userSmsDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userSmsDo) ReadDB() *userSmsDo {
	return u.Clauses(dbresolver.Read)
}

func (u userSmsDo) WriteDB() *userSmsDo {
	return u.Clauses(dbresolver.Write)
}

func (u userSmsDo) Session(config *gorm.Session) *userSmsDo {
	return u.withDO(u.DO.Session(config))
}

func (u userSmsDo) Clauses(conds ...clause.Expression) *userSmsDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userSmsDo) Returning(value interface{}, columns ...string) *userSmsDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userSmsDo) Not(conds ...gen.Condition) *userSmsDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userSmsDo) Or(conds ...gen.Condition) *userSmsDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userSmsDo) Select(conds ...field.Expr) *userSmsDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userSmsDo) Where(conds ...gen.Condition) *userSmsDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userSmsDo) Order(conds ...field.Expr) *userSmsDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userSmsDo) Distinct(cols ...field.Expr) *userSmsDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userSmsDo) Omit(cols ...field.Expr) *userSmsDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userSmsDo) Join(table schema.Tabler, on ...field.Expr) *userSmsDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userSmsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userSmsDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userSmsDo) RightJoin(table schema.Tabler, on ...field.Expr) *userSmsDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userSmsDo) Group(cols ...field.Expr) *userSmsDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userSmsDo) Having(conds ...gen.Condition) *userSmsDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userSmsDo) Limit(limit int) *userSmsDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userSmsDo) Offset(offset int) *userSmsDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userSmsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userSmsDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userSmsDo) Unscoped() *userSmsDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userSmsDo) Create(values ...*user_model.UserSms) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userSmsDo) CreateInBatches(values []*user_model.UserSms, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userSmsDo) Save(values ...*user_model.UserSms) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userSmsDo) First() (*user_model.UserSms, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*user_model.UserSms), nil
	}
}

func (u userSmsDo) Take() (*user_model.UserSms, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*user_model.UserSms), nil
	}
}

func (u userSmsDo) Last() (*user_model.UserSms, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*user_model.UserSms), nil
	}
}

func (u userSmsDo) Find() ([]*user_model.UserSms, error) {
	result, err := u.DO.Find()
	return result.([]*user_model.UserSms), err
}

func (u userSmsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_model.UserSms, err error) {
	buf := make([]*user_model.UserSms, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userSmsDo) FindInBatches(result *[]*user_model.UserSms, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userSmsDo) Attrs(attrs ...field.AssignExpr) *userSmsDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userSmsDo) Assign(attrs ...field.AssignExpr) *userSmsDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userSmsDo) Joins(fields ...field.RelationField) *userSmsDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userSmsDo) Preload(fields ...field.RelationField) *userSmsDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userSmsDo) FirstOrInit() (*user_model.UserSms, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*user_model.UserSms), nil
	}
}

func (u userSmsDo) FirstOrCreate() (*user_model.UserSms, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*user_model.UserSms), nil
	}
}

func (u userSmsDo) FindByPage(offset int, limit int) (result []*user_model.UserSms, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userSmsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userSmsDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userSmsDo) Delete(models ...*user_model.UserSms) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userSmsDo) withDO(do gen.Dao) *userSmsDo {
	u.DO = *do.(*gen.DO)
	return u
}
