// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package user_dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fzf-labs/fpkg/db/gen/example/postgres/user_model"
)

func newSysDict(db *gorm.DB, opts ...gen.DOOption) sysDict {
	_sysDict := sysDict{}

	_sysDict.sysDictDo.UseDB(db, opts...)
	_sysDict.sysDictDo.UseModel(&user_model.SysDict{})

	tableName := _sysDict.sysDictDo.TableName()
	_sysDict.ALL = field.NewAsterisk(tableName)
	_sysDict.ID = field.NewString(tableName, "id")
	_sysDict.Pid = field.NewString(tableName, "pid")
	_sysDict.Name = field.NewString(tableName, "name")
	_sysDict.Type = field.NewInt16(tableName, "type")
	_sysDict.UniqueKey = field.NewString(tableName, "unique_key")
	_sysDict.Value = field.NewString(tableName, "value")
	_sysDict.Status = field.NewInt16(tableName, "status")
	_sysDict.Sort = field.NewFloat64(tableName, "sort")
	_sysDict.Remark = field.NewString(tableName, "remark")
	_sysDict.CreatedAt = field.NewTime(tableName, "created_at")
	_sysDict.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sysDict.DeletedAt = field.NewField(tableName, "deleted_at")

	_sysDict.fillFieldMap()

	return _sysDict
}

type sysDict struct {
	sysDictDo sysDictDo

	ALL       field.Asterisk
	ID        field.String  // 编号
	Pid       field.String  // 0=配置集 !0=父级id
	Name      field.String  // 名称
	Type      field.Int16   // 1文本 2数字 3数组 4单选 5多选 6下拉 7日期 8时间 9单图 10多图 11单文件 12多文件
	UniqueKey field.String  // 唯一值
	Value     field.String  // 配置值
	Status    field.Int16   // 0=禁用 1=开启
	Sort      field.Float64 // 排序值
	Remark    field.String  // 备注
	CreatedAt field.Time    // 创建时间
	UpdatedAt field.Time    // 更新时间
	DeletedAt field.Field   // 删除时间

	fieldMap map[string]field.Expr
}

func (s sysDict) Table(newTableName string) *sysDict {
	s.sysDictDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysDict) As(alias string) *sysDict {
	s.sysDictDo.DO = *(s.sysDictDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysDict) updateTableName(table string) *sysDict {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Pid = field.NewString(table, "pid")
	s.Name = field.NewString(table, "name")
	s.Type = field.NewInt16(table, "type")
	s.UniqueKey = field.NewString(table, "unique_key")
	s.Value = field.NewString(table, "value")
	s.Status = field.NewInt16(table, "status")
	s.Sort = field.NewFloat64(table, "sort")
	s.Remark = field.NewString(table, "remark")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *sysDict) WithContext(ctx context.Context) *sysDictDo { return s.sysDictDo.WithContext(ctx) }

func (s sysDict) TableName() string { return s.sysDictDo.TableName() }

func (s sysDict) Alias() string { return s.sysDictDo.Alias() }

func (s sysDict) Columns(cols ...field.Expr) gen.Columns { return s.sysDictDo.Columns(cols...) }

func (s *sysDict) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysDict) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["pid"] = s.Pid
	s.fieldMap["name"] = s.Name
	s.fieldMap["type"] = s.Type
	s.fieldMap["unique_key"] = s.UniqueKey
	s.fieldMap["value"] = s.Value
	s.fieldMap["status"] = s.Status
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s sysDict) clone(db *gorm.DB) sysDict {
	s.sysDictDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysDict) replaceDB(db *gorm.DB) sysDict {
	s.sysDictDo.ReplaceDB(db)
	return s
}

type sysDictDo struct{ gen.DO }

func (s sysDictDo) Debug() *sysDictDo {
	return s.withDO(s.DO.Debug())
}

func (s sysDictDo) WithContext(ctx context.Context) *sysDictDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysDictDo) ReadDB() *sysDictDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysDictDo) WriteDB() *sysDictDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysDictDo) Session(config *gorm.Session) *sysDictDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysDictDo) Clauses(conds ...clause.Expression) *sysDictDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysDictDo) Returning(value interface{}, columns ...string) *sysDictDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysDictDo) Not(conds ...gen.Condition) *sysDictDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysDictDo) Or(conds ...gen.Condition) *sysDictDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysDictDo) Select(conds ...field.Expr) *sysDictDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysDictDo) Where(conds ...gen.Condition) *sysDictDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysDictDo) Order(conds ...field.Expr) *sysDictDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysDictDo) Distinct(cols ...field.Expr) *sysDictDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysDictDo) Omit(cols ...field.Expr) *sysDictDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysDictDo) Join(table schema.Tabler, on ...field.Expr) *sysDictDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysDictDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysDictDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysDictDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysDictDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysDictDo) Group(cols ...field.Expr) *sysDictDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysDictDo) Having(conds ...gen.Condition) *sysDictDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysDictDo) Limit(limit int) *sysDictDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysDictDo) Offset(offset int) *sysDictDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysDictDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysDictDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysDictDo) Unscoped() *sysDictDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysDictDo) Create(values ...*user_model.SysDict) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysDictDo) CreateInBatches(values []*user_model.SysDict, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysDictDo) Save(values ...*user_model.SysDict) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysDictDo) First() (*user_model.SysDict, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*user_model.SysDict), nil
	}
}

func (s sysDictDo) Take() (*user_model.SysDict, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*user_model.SysDict), nil
	}
}

func (s sysDictDo) Last() (*user_model.SysDict, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*user_model.SysDict), nil
	}
}

func (s sysDictDo) Find() ([]*user_model.SysDict, error) {
	result, err := s.DO.Find()
	return result.([]*user_model.SysDict), err
}

func (s sysDictDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_model.SysDict, err error) {
	buf := make([]*user_model.SysDict, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysDictDo) FindInBatches(result *[]*user_model.SysDict, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysDictDo) Attrs(attrs ...field.AssignExpr) *sysDictDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysDictDo) Assign(attrs ...field.AssignExpr) *sysDictDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysDictDo) Joins(fields ...field.RelationField) *sysDictDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysDictDo) Preload(fields ...field.RelationField) *sysDictDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysDictDo) FirstOrInit() (*user_model.SysDict, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*user_model.SysDict), nil
	}
}

func (s sysDictDo) FirstOrCreate() (*user_model.SysDict, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*user_model.SysDict), nil
	}
}

func (s sysDictDo) FindByPage(offset int, limit int) (result []*user_model.SysDict, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysDictDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysDictDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysDictDo) Delete(models ...*user_model.SysDict) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysDictDo) withDO(do gen.Dao) *sysDictDo {
	s.DO = *do.(*gen.DO)
	return s
}
