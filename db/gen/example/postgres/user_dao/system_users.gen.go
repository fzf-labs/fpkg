// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package user_dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fzf-labs/fpkg/db/gen/example/postgres/user_model"
)

func newSystemUsers(db *gorm.DB, opts ...gen.DOOption) systemUsers {
	_systemUsers := systemUsers{}

	_systemUsers.systemUsersDo.UseDB(db, opts...)
	_systemUsers.systemUsersDo.UseModel(&user_model.SystemUsers{})

	tableName := _systemUsers.systemUsersDo.TableName()
	_systemUsers.ALL = field.NewAsterisk(tableName)
	_systemUsers.ID = field.NewInt64(tableName, "id")
	_systemUsers.Username = field.NewString(tableName, "username")
	_systemUsers.Password = field.NewString(tableName, "password")
	_systemUsers.Nickname = field.NewString(tableName, "nickname")
	_systemUsers.Remark = field.NewString(tableName, "remark")
	_systemUsers.DeptID = field.NewInt64(tableName, "dept_id")
	_systemUsers.PostIDs = field.NewString(tableName, "post_ids")
	_systemUsers.Email = field.NewString(tableName, "email")
	_systemUsers.Mobile = field.NewString(tableName, "mobile")
	_systemUsers.Sex = field.NewInt16(tableName, "sex")
	_systemUsers.Avatar = field.NewString(tableName, "avatar")
	_systemUsers.Status = field.NewInt16(tableName, "status")
	_systemUsers.LoginIP = field.NewString(tableName, "login_ip")
	_systemUsers.LoginDate = field.NewField(tableName, "login_date")
	_systemUsers.Creator = field.NewString(tableName, "creator")
	_systemUsers.CreateTime = field.NewTime(tableName, "create_time")
	_systemUsers.Updater = field.NewString(tableName, "updater")
	_systemUsers.UpdateTime = field.NewTime(tableName, "update_time")
	_systemUsers.Deleted = field.NewInt16(tableName, "deleted")
	_systemUsers.TenantID = field.NewInt64(tableName, "tenant_id")

	_systemUsers.fillFieldMap()

	return _systemUsers
}

type systemUsers struct {
	systemUsersDo systemUsersDo

	ALL        field.Asterisk
	ID         field.Int64  // 用户ID
	Username   field.String // 用户账号
	Password   field.String // 密码
	Nickname   field.String // 用户昵称
	Remark     field.String // 备注
	DeptID     field.Int64  // 部门ID
	PostIDs    field.String // 岗位编号数组
	Email      field.String // 用户邮箱
	Mobile     field.String // 手机号码
	Sex        field.Int16  // 用户性别
	Avatar     field.String // 头像地址
	Status     field.Int16  // 帐号状态（0正常 1停用）
	LoginIP    field.String // 最后登录IP
	LoginDate  field.Field  // 最后登录时间
	Creator    field.String // 创建者
	CreateTime field.Time   // 创建时间
	Updater    field.String // 更新者
	UpdateTime field.Time   // 更新时间
	Deleted    field.Int16  // 是否删除
	TenantID   field.Int64  // 租户编号

	fieldMap map[string]field.Expr
}

func (s systemUsers) Table(newTableName string) *systemUsers {
	s.systemUsersDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemUsers) As(alias string) *systemUsers {
	s.systemUsersDo.DO = *(s.systemUsersDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemUsers) updateTableName(table string) *systemUsers {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Username = field.NewString(table, "username")
	s.Password = field.NewString(table, "password")
	s.Nickname = field.NewString(table, "nickname")
	s.Remark = field.NewString(table, "remark")
	s.DeptID = field.NewInt64(table, "dept_id")
	s.PostIDs = field.NewString(table, "post_ids")
	s.Email = field.NewString(table, "email")
	s.Mobile = field.NewString(table, "mobile")
	s.Sex = field.NewInt16(table, "sex")
	s.Avatar = field.NewString(table, "avatar")
	s.Status = field.NewInt16(table, "status")
	s.LoginIP = field.NewString(table, "login_ip")
	s.LoginDate = field.NewField(table, "login_date")
	s.Creator = field.NewString(table, "creator")
	s.CreateTime = field.NewTime(table, "create_time")
	s.Updater = field.NewString(table, "updater")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.Deleted = field.NewInt16(table, "deleted")
	s.TenantID = field.NewInt64(table, "tenant_id")

	s.fillFieldMap()

	return s
}

func (s *systemUsers) WithContext(ctx context.Context) *systemUsersDo {
	return s.systemUsersDo.WithContext(ctx)
}

func (s systemUsers) TableName() string { return s.systemUsersDo.TableName() }

func (s systemUsers) Alias() string { return s.systemUsersDo.Alias() }

func (s systemUsers) Columns(cols ...field.Expr) gen.Columns { return s.systemUsersDo.Columns(cols...) }

func (s *systemUsers) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemUsers) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 20)
	s.fieldMap["id"] = s.ID
	s.fieldMap["username"] = s.Username
	s.fieldMap["password"] = s.Password
	s.fieldMap["nickname"] = s.Nickname
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["dept_id"] = s.DeptID
	s.fieldMap["post_ids"] = s.PostIDs
	s.fieldMap["email"] = s.Email
	s.fieldMap["mobile"] = s.Mobile
	s.fieldMap["sex"] = s.Sex
	s.fieldMap["avatar"] = s.Avatar
	s.fieldMap["status"] = s.Status
	s.fieldMap["login_ip"] = s.LoginIP
	s.fieldMap["login_date"] = s.LoginDate
	s.fieldMap["creator"] = s.Creator
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["updater"] = s.Updater
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["deleted"] = s.Deleted
	s.fieldMap["tenant_id"] = s.TenantID
}

func (s systemUsers) clone(db *gorm.DB) systemUsers {
	s.systemUsersDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s systemUsers) replaceDB(db *gorm.DB) systemUsers {
	s.systemUsersDo.ReplaceDB(db)
	return s
}

type systemUsersDo struct{ gen.DO }

func (s systemUsersDo) Debug() *systemUsersDo {
	return s.withDO(s.DO.Debug())
}

func (s systemUsersDo) WithContext(ctx context.Context) *systemUsersDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemUsersDo) ReadDB() *systemUsersDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemUsersDo) WriteDB() *systemUsersDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemUsersDo) Session(config *gorm.Session) *systemUsersDo {
	return s.withDO(s.DO.Session(config))
}

func (s systemUsersDo) Clauses(conds ...clause.Expression) *systemUsersDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemUsersDo) Returning(value interface{}, columns ...string) *systemUsersDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemUsersDo) Not(conds ...gen.Condition) *systemUsersDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemUsersDo) Or(conds ...gen.Condition) *systemUsersDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemUsersDo) Select(conds ...field.Expr) *systemUsersDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemUsersDo) Where(conds ...gen.Condition) *systemUsersDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemUsersDo) Order(conds ...field.Expr) *systemUsersDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemUsersDo) Distinct(cols ...field.Expr) *systemUsersDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemUsersDo) Omit(cols ...field.Expr) *systemUsersDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemUsersDo) Join(table schema.Tabler, on ...field.Expr) *systemUsersDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemUsersDo) LeftJoin(table schema.Tabler, on ...field.Expr) *systemUsersDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemUsersDo) RightJoin(table schema.Tabler, on ...field.Expr) *systemUsersDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemUsersDo) Group(cols ...field.Expr) *systemUsersDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemUsersDo) Having(conds ...gen.Condition) *systemUsersDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemUsersDo) Limit(limit int) *systemUsersDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemUsersDo) Offset(offset int) *systemUsersDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemUsersDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *systemUsersDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemUsersDo) Unscoped() *systemUsersDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemUsersDo) Create(values ...*user_model.SystemUsers) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemUsersDo) CreateInBatches(values []*user_model.SystemUsers, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemUsersDo) Save(values ...*user_model.SystemUsers) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemUsersDo) First() (*user_model.SystemUsers, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*user_model.SystemUsers), nil
	}
}

func (s systemUsersDo) Take() (*user_model.SystemUsers, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*user_model.SystemUsers), nil
	}
}

func (s systemUsersDo) Last() (*user_model.SystemUsers, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*user_model.SystemUsers), nil
	}
}

func (s systemUsersDo) Find() ([]*user_model.SystemUsers, error) {
	result, err := s.DO.Find()
	return result.([]*user_model.SystemUsers), err
}

func (s systemUsersDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_model.SystemUsers, err error) {
	buf := make([]*user_model.SystemUsers, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemUsersDo) FindInBatches(result *[]*user_model.SystemUsers, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemUsersDo) Attrs(attrs ...field.AssignExpr) *systemUsersDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemUsersDo) Assign(attrs ...field.AssignExpr) *systemUsersDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemUsersDo) Joins(fields ...field.RelationField) *systemUsersDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemUsersDo) Preload(fields ...field.RelationField) *systemUsersDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemUsersDo) FirstOrInit() (*user_model.SystemUsers, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*user_model.SystemUsers), nil
	}
}

func (s systemUsersDo) FirstOrCreate() (*user_model.SystemUsers, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*user_model.SystemUsers), nil
	}
}

func (s systemUsersDo) FindByPage(offset int, limit int) (result []*user_model.SystemUsers, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemUsersDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemUsersDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemUsersDo) Delete(models ...*user_model.SystemUsers) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemUsersDo) withDO(do gen.Dao) *systemUsersDo {
	s.DO = *do.(*gen.DO)
	return s
}
