// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package user_dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fzf-labs/fpkg/db/gen/example/postgres/user_model"
)

func newDataTypeDemo(db *gorm.DB, opts ...gen.DOOption) dataTypeDemo {
	_dataTypeDemo := dataTypeDemo{}

	_dataTypeDemo.dataTypeDemoDo.UseDB(db, opts...)
	_dataTypeDemo.dataTypeDemoDo.UseModel(&user_model.DataTypeDemo{})

	tableName := _dataTypeDemo.dataTypeDemoDo.TableName()
	_dataTypeDemo.ALL = field.NewAsterisk(tableName)
	_dataTypeDemo.ID = field.NewString(tableName, "id")
	_dataTypeDemo.DataTypeBool = field.NewBool(tableName, "data_type_bool")
	_dataTypeDemo.DataTypeInt2 = field.NewInt16(tableName, "data_type_int2")
	_dataTypeDemo.DataTypeInt8 = field.NewInt64(tableName, "data_type_int8")
	_dataTypeDemo.DataTypeVarchar = field.NewString(tableName, "data_type_varchar")
	_dataTypeDemo.DataTypeText = field.NewString(tableName, "data_type_text")
	_dataTypeDemo.DataTypeJSON = field.NewField(tableName, "data_type_json")
	_dataTypeDemo.CreatedAt = field.NewTime(tableName, "created_at")
	_dataTypeDemo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_dataTypeDemo.DeletedAt = field.NewField(tableName, "deleted_at")

	_dataTypeDemo.fillFieldMap()

	return _dataTypeDemo
}

type dataTypeDemo struct {
	dataTypeDemoDo dataTypeDemoDo

	ALL             field.Asterisk
	ID              field.String // ID
	DataTypeBool    field.Bool   // 数据类型 bool
	DataTypeInt2    field.Int16  // 数据类型 int2
	DataTypeInt8    field.Int64  // 数据类型 int8
	DataTypeVarchar field.String // 数据类型 varchar
	DataTypeText    field.String // 数据类型 text
	DataTypeJSON    field.Field  // 数据类型 json
	CreatedAt       field.Time   // 创建时间
	UpdatedAt       field.Time   // 更新时间
	DeletedAt       field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (d dataTypeDemo) Table(newTableName string) *dataTypeDemo {
	d.dataTypeDemoDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dataTypeDemo) As(alias string) *dataTypeDemo {
	d.dataTypeDemoDo.DO = *(d.dataTypeDemoDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dataTypeDemo) updateTableName(table string) *dataTypeDemo {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.DataTypeBool = field.NewBool(table, "data_type_bool")
	d.DataTypeInt2 = field.NewInt16(table, "data_type_int2")
	d.DataTypeInt8 = field.NewInt64(table, "data_type_int8")
	d.DataTypeVarchar = field.NewString(table, "data_type_varchar")
	d.DataTypeText = field.NewString(table, "data_type_text")
	d.DataTypeJSON = field.NewField(table, "data_type_json")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")

	d.fillFieldMap()

	return d
}

func (d *dataTypeDemo) WithContext(ctx context.Context) *dataTypeDemoDo {
	return d.dataTypeDemoDo.WithContext(ctx)
}

func (d dataTypeDemo) TableName() string { return d.dataTypeDemoDo.TableName() }

func (d dataTypeDemo) Alias() string { return d.dataTypeDemoDo.Alias() }

func (d dataTypeDemo) Columns(cols ...field.Expr) gen.Columns {
	return d.dataTypeDemoDo.Columns(cols...)
}

func (d *dataTypeDemo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dataTypeDemo) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 10)
	d.fieldMap["id"] = d.ID
	d.fieldMap["data_type_bool"] = d.DataTypeBool
	d.fieldMap["data_type_int2"] = d.DataTypeInt2
	d.fieldMap["data_type_int8"] = d.DataTypeInt8
	d.fieldMap["data_type_varchar"] = d.DataTypeVarchar
	d.fieldMap["data_type_text"] = d.DataTypeText
	d.fieldMap["data_type_json"] = d.DataTypeJSON
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
}

func (d dataTypeDemo) clone(db *gorm.DB) dataTypeDemo {
	d.dataTypeDemoDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dataTypeDemo) replaceDB(db *gorm.DB) dataTypeDemo {
	d.dataTypeDemoDo.ReplaceDB(db)
	return d
}

type dataTypeDemoDo struct{ gen.DO }

func (d dataTypeDemoDo) Debug() *dataTypeDemoDo {
	return d.withDO(d.DO.Debug())
}

func (d dataTypeDemoDo) WithContext(ctx context.Context) *dataTypeDemoDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dataTypeDemoDo) ReadDB() *dataTypeDemoDo {
	return d.Clauses(dbresolver.Read)
}

func (d dataTypeDemoDo) WriteDB() *dataTypeDemoDo {
	return d.Clauses(dbresolver.Write)
}

func (d dataTypeDemoDo) Session(config *gorm.Session) *dataTypeDemoDo {
	return d.withDO(d.DO.Session(config))
}

func (d dataTypeDemoDo) Clauses(conds ...clause.Expression) *dataTypeDemoDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dataTypeDemoDo) Returning(value interface{}, columns ...string) *dataTypeDemoDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dataTypeDemoDo) Not(conds ...gen.Condition) *dataTypeDemoDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dataTypeDemoDo) Or(conds ...gen.Condition) *dataTypeDemoDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dataTypeDemoDo) Select(conds ...field.Expr) *dataTypeDemoDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dataTypeDemoDo) Where(conds ...gen.Condition) *dataTypeDemoDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dataTypeDemoDo) Order(conds ...field.Expr) *dataTypeDemoDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dataTypeDemoDo) Distinct(cols ...field.Expr) *dataTypeDemoDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dataTypeDemoDo) Omit(cols ...field.Expr) *dataTypeDemoDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dataTypeDemoDo) Join(table schema.Tabler, on ...field.Expr) *dataTypeDemoDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dataTypeDemoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *dataTypeDemoDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dataTypeDemoDo) RightJoin(table schema.Tabler, on ...field.Expr) *dataTypeDemoDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dataTypeDemoDo) Group(cols ...field.Expr) *dataTypeDemoDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dataTypeDemoDo) Having(conds ...gen.Condition) *dataTypeDemoDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dataTypeDemoDo) Limit(limit int) *dataTypeDemoDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dataTypeDemoDo) Offset(offset int) *dataTypeDemoDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dataTypeDemoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *dataTypeDemoDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dataTypeDemoDo) Unscoped() *dataTypeDemoDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dataTypeDemoDo) Create(values ...*user_model.DataTypeDemo) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dataTypeDemoDo) CreateInBatches(values []*user_model.DataTypeDemo, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dataTypeDemoDo) Save(values ...*user_model.DataTypeDemo) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dataTypeDemoDo) First() (*user_model.DataTypeDemo, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*user_model.DataTypeDemo), nil
	}
}

func (d dataTypeDemoDo) Take() (*user_model.DataTypeDemo, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*user_model.DataTypeDemo), nil
	}
}

func (d dataTypeDemoDo) Last() (*user_model.DataTypeDemo, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*user_model.DataTypeDemo), nil
	}
}

func (d dataTypeDemoDo) Find() ([]*user_model.DataTypeDemo, error) {
	result, err := d.DO.Find()
	return result.([]*user_model.DataTypeDemo), err
}

func (d dataTypeDemoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*user_model.DataTypeDemo, err error) {
	buf := make([]*user_model.DataTypeDemo, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dataTypeDemoDo) FindInBatches(result *[]*user_model.DataTypeDemo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dataTypeDemoDo) Attrs(attrs ...field.AssignExpr) *dataTypeDemoDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dataTypeDemoDo) Assign(attrs ...field.AssignExpr) *dataTypeDemoDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dataTypeDemoDo) Joins(fields ...field.RelationField) *dataTypeDemoDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dataTypeDemoDo) Preload(fields ...field.RelationField) *dataTypeDemoDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dataTypeDemoDo) FirstOrInit() (*user_model.DataTypeDemo, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*user_model.DataTypeDemo), nil
	}
}

func (d dataTypeDemoDo) FirstOrCreate() (*user_model.DataTypeDemo, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*user_model.DataTypeDemo), nil
	}
}

func (d dataTypeDemoDo) FindByPage(offset int, limit int) (result []*user_model.DataTypeDemo, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dataTypeDemoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dataTypeDemoDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dataTypeDemoDo) Delete(models ...*user_model.DataTypeDemo) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dataTypeDemoDo) withDO(do gen.Dao) *dataTypeDemoDo {
	d.DO = *do.(*gen.DO)
	return d
}
